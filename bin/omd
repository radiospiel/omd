#!/usr/bin/env ruby

require "bundler/inline"

# rubocop:disable Layout/MultilineMethodCallIndentation
# rubocop:disable Style/GuardClause
# rubocop:disable Style/WhileUntilModifier
# rubocop:disable Style/ParallelAssignment

gemfile do
  source "https://rubygems.org"
  gem "rb-fsevent", require: false
  gem "simple-cli", "~> 0.3.13", require: false
end

require "simple-cli"
require "fileutils"
require "benchmark"
require "tmpdir"
require "open3"
require "digest"
require "pstore"

module OMD
  extend self

  def logger
    Simple::CLI.logger
  end
end

module OMD::CLI
  include ::Simple::CLI

  private

  def check_paths(src, dest, clean:)
    dest ||= src.gsub(/\.[^\.]*$/, "") + ".md"

    raise "#{src} and #{dest} files must differ" unless src != dest
    raise "#{src}: missing or not a file" unless File.exist?(src) && File.file?(src)
    raise "#{dest}: cannot be a directory" if File.exist?(dest) && File.directory?(dest)

    src = File.expand_path(src)
    dest = File.expand_path(dest)

    raise "input and output file must be in the same directory" if File.dirname(src) != File.dirname(dest)

    OMD.prepare_destination(dest, clean: clean)
    [src, dest]
  end

  public

  # Process src file, and process into a destination file
  #
  # Flags:
  #
  #   --output=<file>     The output file, defaults to the source file with a ".md" file extension
  #   --display           Open the "Marked 2" markdown preview
  #   --clean             Clear put cache
  #
  # Example:
  #
  # To process the src/README.omd file and generate the src/README.md file, using the cache
  # for results from previous runs:
  #
  #     omd process src/README.omd
  #
  # To completely process the src/README.omd file, ignoring everything in the cache, generate
  # the src/result.md file, and open the "Marked 2" markdown viewer:
  #
  #     omd process src/README.omd --output=src/result.md --clean --display
  #
  def process(src, output: nil, clean: false, display: false)
    src, dest = check_paths src, output, clean: clean

    OMD.process(src, dest)
    system "open", "-a", "Marked 2", dest if display
  end

  # Watches a source file, rebuilding the destination target whenever necessary
  #
  # Flags:
  #
  #   --output=<file>     The output file, defaults to the source file with a ".md" file extension
  #   --display           Open the "Marked 2" markdown preview
  #   --clean             Clear put cache
  #
  # Example:
  #
  # To process the src/README.omd file and generate the src/README.md file, using the cache
  # for results from previous runs:
  #
  #     omd process src/README.omd
  #
  # To completely process the src/README.omd file, ignoring everything in the cache, generate
  # the src/result.md file, and open the "Marked 2" markdown viewer:
  #
  #     omd process src/README.omd --output=src/result.md --clean --display
  #
  def watch(src, output: nil, clean: false, display: false)
    src, dest = check_paths src, output, clean: clean

    # process once (so that we are up to date)
    process src, output: dest, clean: false, display: display

    # start watching
    require "rb-fsevent"
    fsevent = FSEvent.new
    fsevent.watch [__dir__, File.dirname(src)], latency: 0.1 do |dirs, event_meta|
      next unless detected_change?(dirs, event_meta, src_dir: File.dirname(src))

      OMD.process(src, dest)
    end
    fsevent.run
  end

  private

  def detected_change?(dirs, _event_meta, src_dir:)
    logger.debug "Detected change in", dirs.join(",")

    if dirs.any? { |dir| dir.start_with?(__dir__) }
      logger.info "reloading", __FILE__
      load __FILE__
      return true
    end

    src_dir = File.expand_path(src_dir)
    if dirs.any? { |dir| dir.start_with?(src_dir) }
      return true
    end
  end
end

# -- helpers ------------------------------------------------------------------

def File.write(path, body, permissions: nil)
  File.open(path, "w") do |io|
    io.write(body)
  end

  File.chmod permissions, path if permissions

  path
end

module OMD
  module SourceVersion
    extend self

    def reset!
      OMD.logger.success "reset source_version"
      @source_version = nil
    end

    reset!

    def reloaded?
      reloaded = @previous_source_version != OMD::SourceVersion.source_version
      @previous_source_version = OMD::SourceVersion.source_version
      reloaded
    end

    def source_version
      return @source_version if @source_version

      @source_version = Digest::MD5.hexdigest(File.read(__FILE__))
      OMD.logger.success "source_version", @source_version
      @source_version
    end
  end
end

module OMD
  class Cache
    def self.key(*parts)
      Digest::MD5.hexdigest(OMD::SourceVersion.source_version + ":" + parts.join(","))
    end

    def initialize(dir)
      @store = PStore.new(File.join(dir, ".omd.pstore"))
      @store.ultra_safe = true
    end

    def cached(*keys)
      key = Cache.key(*keys)

      @store.transaction do
        @store[key] ||= yield
      end
    end
  end

  def dest_data_dir(dest)
    dirname, basename = File.dirname(dest), File.basename(dest)
    File.join(dirname, "#{basename}.data")
  end

  def prepare_destination(dest, clean:)
    FileUtils.rm_rf(dest_data_dir(dest)) if clean
    FileUtils.mkdir_p(dest_data_dir(dest))
  end

  class Writer
    def self.open(path)
      # tmp_name = "#{path}.#{$$}"
      writer = new(OMD.dest_data_dir(path), path)
      yield writer
      # File.rename(tmp_name, path)
    ensure
      if writer
        writer.close
      end
    end

    def initialize(dir, path)
      @fd = File.open(path, "w")
      @dir = dir
      @changes = []
      @cache = Cache.new(@dir)
    end

    def close
      apply_changes

      @fd.close
      @fd = nil
    end

    def transaction(*args)
      apply_changes

      begin
        changes = @cache.cached(*args) do
          yield
          @changes
        end
        @changes = changes
      rescue IncompleteTransaction
        @changes = []
        yield
        @changes = changes
      end

      apply_changes
    end

    # -- basic ops ------------------------------------------------------------
    # basic ops are caught in the transaction.

    def line(line)
      @changes << [:line, line]
    end

    def code_block(body, lang: nil)
      @changes << [:code_block, body, lang]
    end

    # -- secondary ops --------------------------------------------------------
    # secondary ops are built off basic ops

    class IncompleteTransaction < RuntimeError; end

    def copy_file(path)
      unless File.exist?(path)
        raise IncompleteTransaction, "copy_file: missing file #{path}"
      end

      digest = Digest::MD5.hexdigest File.read(path)
      dest_file = File.join(@dir, "#{digest}#{File.extname(path)}")
      FileUtils.mkdir_p @dir
      FileUtils.cp(path, dest_file)
      OMD.logger.warn "copy_file #{path} -> #{dest_file}"

      File.join(File.basename(@dir), File.basename(dest_file))
    end

    def image(src, alt: nil)
      OMD.logger.warn "image #{src.inspect}"
      
      dest_path = copy_file(src)
      line "![#{alt}](./#{dest_path})"
    end

    def error(body)
      code_block body, lang: "error"
    end

    def table(csv, separator:)
      csv.chomp!
      csv = "|" + csv.gsub("\n", "|\n|") + "|"
      csv = csv.gsub(separator, " | ")

      # | Tables   |      Are      |  Cool |
      # |----------|:-------------:|------:|
      #
      # | col 1 is |  left-aligned | $1600 |
      # | col 2 is |    centered   |   $12 |
      # | col 3 is | right-aligned |    $1 |

      header, rest = csv.split("\n", 2)
      line(header)
      sep = header.gsub(/./) { |ch| ch == "|" ? "|" : "-" }
      line(sep)

      line(rest)
    end

    private

    # this method is used for transaction.
    def apply_changes
      @changes.each do |change, *args|
        case change
        when :line
          line, = *args
          @fd.puts line
        when :code_block
          body, lang = *args
          @fd.puts <<~MD
            ```#{lang}
            #{body.chomp}
            ```
          MD
        end
      end
      @changes = []
    end
  end

  # Process one or more input files, put results into dest
  def process(src, dest)
    return if File.exist?(dest) && File.mtime(src) < File.mtime(dest) && !OMD::SourceVersion.reloaded?

    processing_time = nil

    Writer.open(dest) do |writer|
      processing_time = Benchmark.realtime do
        input = File.open src

        # read file line by line. Extract and yield omd blocks
        while (line = input.gets)
          unless line =~ /^```{\s*(.*)\s*}\s*$/
            writer.line(line)
            next
          end

          omd_args = Regexp.last_match(1)
          # read until end of omd block
          code_block = []
          while (line = input.gets)
            break if line.start_with?("```")

            code_block << line
          end

          code_block = code_block.join("")

          code_block = unintend(code_block)

          print_code_block(omd_args, code_block, writer: writer)
          
          writer.transaction(omd_args, code_block) do
            process_code_block(omd_args, code_block, writer: writer)
          end
        end
      end
    end

    logger.info "generated #{dest} from #{src}: #{"%.3f secs" % processing_time}"
  end

  def unintend(code_block)
    code_block = code_block
      .split("\n")

    number_of_leading_spaces = code_block
      .reject { |line| line =~ /^\s*$/ }
      .map { |line| line =~ /^( *)/ && $1 }
      .compact
      .map(&:length)
      .min

    code_block
      .map { |line| line =~ /^ / ? line[number_of_leading_spaces..-1] : line }
      .map { |line| "#{line}\n" }.join
  end

  class ShellError < RuntimeError; end

  module H
    extend self

    def sh(cmd)
      sh! cmd, raise_on_error: false
    end

    def sh!(cmd, raise_on_error: true)
      OMD.logger.warn "Running #{cmd}"
      stdout_str, stderr_str, status = Open3.capture3(cmd)

      # "Running #{cmd}"
      return stdout_str if status.exitstatus == 0
      return stdout_str if !raise_on_error

      OMD.logger.warn "Running #{cmd} -> #{status.exitstatus}"
      OMD.logger.info stderr_str

      raise ShellError, stderr_str if raise_on_error
    end
  end

  module Processors
    extend self

    def comment(intro, code_block, writer:); end

    def dot(filters, code_block, writer:)
      File.write("omd.dot", code_block)

      H.sh! "dot -Tpng -Gsize=16,16\! -Gdpi=72  -o dot.png omd.dot"

      writer.image "dot.png", alt: "dot"
    end

    def ruby(filters, code_block, writer:)
      gemfile = ENV["BUNDLE_GEMFILE"]

      if gemfile
        ENV["BUNDLE_GEMFILE"] = nil
      end

      File.write("omd.rb", code_block, permissions: 0o755)

      result = H.sh! "ruby ./omd.rb"
      writer.code_block result, lang: "ruby"
    ensure
      ENV["BUNDLE_GEMFILE"] = nil if gemfile
    end

    def bob(filters, code_block, writer:)
      File.write("omd.bob", code_block)
      result = H.sh! "svgbob omd.bob -o bob.svg"
      writer.image "bob.svg", alt: "svgbob"
    end

    def mermaid(filters, code_block, writer:)
      OMD.logger.warn "mermaid"
      File.write("omd.mmd", code_block)
      OMD.logger.warn "wrote file mermaid"
      result = H.sh! "mmdc -i omd.mmd -o mermaid.png"
      OMD.logger.warn "got result"
      writer.image "mermaid.png", alt: "mermaid"
    end

    def bash(filters, code_block, writer:)
      tmp_file = ".omd-#{$$}.sh"
      File.write tmp_file, <<~BASH, permissions: 0755
      #!/bin/bash
      #{code_block}
      BASH

      result = H.sh! "./#{tmp_file}"
      
      if filters.length == 1
        writer.code_block result, lang: filters.first
      else
        writer.code_block result
      end
    ensure
      FileUtils.rm_f tmp_file
    end    

    def cc(filters, code_block, writer:)
      File.write("omd.cc", code_block)

      H.sh! "cc -Wall omd.cc"

      result = H.sh! "./a.out 10"
      writer.code_block result
    end

    def sql(filters, code_block, writer:)
      File.write("omd.sql", code_block)

      success = H.sh! "psql -F'\t' --no-align -f omd.sql"
      writer.table(success, separator: "\t")
    end
  end

  def print_code_block(intro, code_block, writer:)
    return if intro =~ /^@/
    return if intro =~ /^comment/

    lang = $1 if intro =~ /^@?(\S+)/

    # lines starting with "@" are to be hidden.
    code_block = code_block.gsub(/^@[^\n]*\n/, "")

    # remove leading and trailing empty lines.
    while code_block.start_with?("\n")
      code_block = code_block[1..-1]
    end
    while code_block.end_with?("\n")
      code_block = code_block[0...-1]
    end

    writer.code_block(code_block, lang: lang)
  end
  
  def process_in_dir(tmpdir:)
    return yield unless tmpdir

    Dir.mktmpdir do |tmpdir|
      Dir.chdir tmpdir do
        yield
      end
    end
  end

  def process_code_block(intro, code_block, writer:)
    intro.gsub!(/^@\s*/, "")
    lang, *filters = intro.split(/\s*\|\s*/)

    if !lang || !Processors.respond_to?(lang)
      writer.error "omd: Unsupported omd processor #{lang.inspect}"
      return
    end

    logger.warn "processing an #{intro.inspect} block"

    run_in_tmp_dir = !%w(bash).include?(lang)

    process_in_dir(tmpdir: run_in_tmp_dir) do
      code_block = code_block.gsub(/^@\s*/, "")
      Processors.send lang, filters, code_block, writer: writer
    rescue ShellError
      writer.error($!.to_s)
    end
  end
end

unless $loaded
  $loaded = true
  Simple::CLI.run!(OMD::CLI, *ARGV)
end
