```{comment}
https://github.com/jonschlinkert/remarkable#syntax-extensions
```

<!--TOC-->

# Outline

This is where I start

## Simple Code

The following is a simple command:


```{cc}
    @ #include <stdio.h>
    @ #include <stdlib.h>
    
    int fib(int n) {
      return n < 3 ? 1 : fib(n-1) + fib(n-2);
    }

    int main(int argc, char** argv) {
      int n = atoi(argv[1]);
      printf("Fibonacci number of %d is %d\n", n, fib(n));
    }
```

This code is pretty straight forward - but what does it communicate?

Now some ruby:

```{ruby}
require 'benchmark'

data = "1" * 1000
n = 1000
Benchmark.bm do |x|
  x.report("+=") { s = ""; for i in 1..n; s += data; end }
  x.report("<<") { s = ""; for i in 1..n; s << data; end }
end
```

and some SQL:

```{sql}
SELECT *
FROM
  generate_series(1, 4) as a(aa),
  generate_series(1, 2) as b(b)
```

```{@dot}
digraph finite_state_machine {
	rankdir=LR;
	node [shape = doublecircle]; LR_0 LR_3 LR_4 LR_8;
	node [shape = square];
	LR_0 -> LR_2 [ label = "foobar" ];
	LR_0 -> LR_1 [ label = "SS(S)" ];
	LR_1 -> LR_3 [ label = "S($end)" ];
	LR_2 -> LR_6 [ label = "SS(b)" ];
	LR_7 -> LR_8 [ label = "S(b)" ];
	LR_7 -> LR_5 [ label = "S(a)" ];
	LR_8 -> LR_5 [ label = "S(a)" ];
}
```
